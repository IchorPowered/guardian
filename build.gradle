buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'idea'
    id 'eclipse'
    id 'signing'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'ninja.miserable.blossom' version '1.0.1'
    id 'com.github.johnrengelman.shadow' version '2.0.0'
    id 'org.spongepowered.plugin' version '0.8.1'
}

defaultTasks 'licenseFormat', 'build'

group = pluginGroup
version = "${spongeVersion}-${pluginVersion}-${pluginPatch}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sponge.plugin.id = pluginId

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.bstats.org/content/groups/public/' }
    maven { url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft' }
}

dependencies {
    compile 'org.spongepowered:spongeapi:7.0.0-SNAPSHOT'

    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.github.me4502:ModularFramework:35dc605747'

    compile 'com.github.me4502:Precogs:dddc890efc'
    compile 'org.bstats:bstats-sponge-lite:1.1'

    compile 'io.github.nucleuspowered:nucleus-api:0.29.0-SNAPSHOT-S6.0'
}

blossom {
    def location = 'src/main/java/io/github/connorhartley/guardian/PluginInfo.java'

    replaceToken '@id@', project.pluginId, location
    replaceToken '@name@', project.pluginName, location
    replaceToken '@version@', version, location
    replaceToken '@description@', project.pluginDescription, location
    replaceToken '@elderversion@', project.elderVersion, location
    replaceToken '@precogsversion@', project.precogsVersion, location
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

signing {
    required false
    sign configurations.archives
}

license {
    header = file('LICENSE')
    include '**/*.java'

    ignoreFailures = false
    strictCheck = true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

task sourceJar(type: Jar) {
    classifier = 'source'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    classifier = 'dev'
}

shadowJar {
    classifier = 'unminified'
    dependencies {
        include(dependency('org.apache.commons:commons-math3:3.6.1'))

        relocate ('com.me4502.modularframework', 'io.github.connorhartley.guardian.util.module') {
            include dependency('com.github.me4502:ModularFramework')
            exclude 'com.me4502.modularframework.ModularFramework'
        }

        relocate ('org.bstats', 'io.github.connorhartley.guardian.util.metrics') {
            include(dependency('org.bstats:bstats-sponge-lite'))
        }
    }
    exclude 'GradleStart**'
    exclude '.cache'
    exclude 'LICENSE'
    exclude 'com/me4502/modularframework/ModularFramework.class'
}

task minifyShadedJar(type: ProGuardTask, group: 'Build', description: 'Minifies the shaded JAR.') {
    def shadedFile = shadowJar.archivePath
    def minifiedFile = file(shadedFile.path.replaceFirst('-unminified', ''))

    injars shadedFile
    outjars minifiedFile

    libraryjars files(configurations.runtime.collect())
    libraryjars file("${System.getProperty('java.home')}/lib/rt.jar")

    dontoptimize
    dontobfuscate
    dontwarn

    keepattributes 'Signature, InnerClasses, Annotation'
    keep "class !com.github.me4502.**,io.github.connorhartley.guardian.** { *; }"
}

artifacts {
    tasks.minifyShadedJar.outJarFiles.each {
        archives it
    }

    archives shadowJar
    archives sourceJar
    archives javadocJar
    archives jar
}

model {
    tasks.signArchives {
        dependsOn tasks.minifyShadedJar
    }
}

class ProGuardTask extends proguard.gradle.ProGuardTask {
    def keepclass(String className) {
        keep "class ${className},${className}\$* { *; }"
    }
}

tasks.minifyShadedJar.dependsOn(shadowJar)

build.dependsOn(shadowJar)
build.dependsOn(sourceJar)
build.dependsOn(javadocJar)
build.dependsOn(jar)
build.dependsOn(minifyShadedJar)